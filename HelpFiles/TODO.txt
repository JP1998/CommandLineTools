- sub-commands that can easily be implemented for easily distinguishing between functionalities
  that belong to a certain program (like how "git add" belongs to "git")
- a GUI that is more comfortable to use than the cli of Win7
  - add a limit to the amount of lines to print without user interaction
      => make status of paging for in and out streams to prevent paging to happen for input prompts
         implement paging commands:
            newline     allows printing of one more row
            space       allows printing of another page (a set amount of lines)
            q           quits the task that is printing all the information
//   - giving the possibility of a implicit parameter passing through a defined order for the parameters without default values
//   - giving the possibility of viewing / recalling history with arrow keys
//     - maybe adding a cap of the amount of records that are being captured
//     - maybe adding a possibility of clearing the record history (for improved security with passwords)
//   - giving the possibility of a short notation for boolean parameters ("--<name>" for true and "--not-<name>" for false)
//   - text-based but created with a window
//   - using streams to read / write (so System.out and Scanner may still be used)
- Updating README.md to have actually usable code examples lol
  - the last section (creation of a new command) has ordinals to be added
  - the code sample needs a cast to int in the second parameter and needs a ordinal in the first
- maybe implement lazy conversion for parameter values?
  -> could improve runtime for commands with parameters that are
     not always used but have an expensive conversion
- implement some kind of lightweight pattern matching for Filtering files
- creating the possibility for smart auto-complete in the ui-client
- allow nested command calls (like "list find asdf C:/Users/", which should list all
    the files in any directory containing the phrase "asdf" in "C:/Users/")?
- some default command such as:
  - bulk renaming files within a directory
    - having an option for the folder to rename the contained files of
    - having an option to filter files
    - having an option to rename everything but matches to a pattern
    - having an option to recursively rename within subdirectories
    - having an option to format the result name
  - password generator / manager
  - interpreter for brainfuck
  - interpreter for false
// - adding the possibility to add a custom ICommandLine-type to the Main-class,
//     which should be able to be used with certain command-line arguments
// - making the execution of shell / console commands possible
// - creating the possibility to easily parse arrays of arbitrary (but parseable, as determined by the used Converter-object) type
//   - extend the regex used in StringProcessing#tokenize(String) to allow arrays with whitespace but without the string denominator
//   - handle nested arrays (maybe with recursion?)
//   - apparently we'll have to create a custom Array-type
// - refactoring:
//   - FilterMode:
//     - create lambdas from the anonymous classes within the enum-values
//   - FilterModeApplication:
//     - extract the default methods
//   - FileEncryptor:
//     - take its responsibility to load from and write to files (should be within CommonFileUtilities)
//     - rename FileEncryptor to a more general EncryptionService since it does not need to be used with files
//     - rename EncryptionResult to FileEncryptionResult
//     - make encrypt and decrypt public, and make it return a new type EncryptionResult
// - bulk de- and encrypting of files
//   - having an option for the folder to de- / encrypt the contained files
//   - having an option to filter files
//   - having an option to de- / encrypt everything but matches to a pattern
//   - having an option to recursively de- / encrypt within subdirectories
//   - having an option of where to save the output
//   - having an option to format the output files file names
//   - having an option for the used password
//   - deleting folders that may be eventually empty
//   - listing files within a directory
//     - having an option for the folder to list the contained files of
//     - having an option to format as a tree
//     - having an option to filter files
//     - having an option to list everything but matches to a pattern
//     - having an option to list folders
//     - having an option to recursively search within subdirectories
//     - having an option of how to format the output
// - make a command return a CommandExecutionResult (or similar object variable)
//   - makes it easier to extend commands later on
//   - makes it easier to implement an easy CLI in other environments (like a Swing- or JavaFX-window)
// - Change filenamingtemplates extension to include the point!
// - make StringProcessing#descape(String) also support unicode escapes like "\uD800\uDC01"
